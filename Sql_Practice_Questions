** Sql_Practice_Questions and Imp Topic Notes
Exercise 3 — Tasks
Find all the Toy Story movies ✓
Find all the movies directed by John Lasseter ✓
Find all the movies (and director) not directed by John Lasseter ✓
Find all the WALL-* movies 


-- SELECT * FROM movies where title like 'toy%';
-- select title,director from movies where director like 'john Lasseter'
-- select title,director from movies where director not like'john Lasseter'
-- select * from movies where title like 'Wall%'




Exercise 4 — Tasks
List all directors of Pixar movies (alphabetically), without duplicates ✓
List the last four Pixar movies released (ordered from most recent to least) ✓
List the first five Pixar movies sorted alphabetically ✓
List the next five Pixar movies sorted alphabetically 

SELECT distinct(director) FROM movies order by director Asc ;
SELECT title,year FROM movies order by year Desc limit 4 ;
select title from movies order by title limit 5;
select title from movies order by title  limit 5 offset 5;


Review 1 — Tasks
List all the Canadian cities and their populations ✓
Order all the cities in the United States by their latitude from north to south ✓
List all the cities west of Chicago, ordered from west to east ✓
List the two largest cities in Mexico (by population) ✓
List the third and fourth largest cities (by population) in the United States and their population ✓ 

SELECT city,population FROM north_american_cities where Country="Canada";
select * from north_american_cities;
select City,latitude,longitude from north_american_cities where Country="United States" order by latitude,longitude;
SELECT city, longitude FROM north_american_citiesWHERE longitude < -87.629798 ORDER BY longitude ASC;
SELECT city, population FROM north_american_cities WHERE country LIKE "United States" ORDER BY population DESC LIMIT 2 OFFSET 2;


Exercise 6 — Tasks
Find the domestic and international sales for each movie ✓
Show the sales numbers for each movie that did better internationally rather than domestically ✓
List all the movies by their ratings in descending order ✓


SELECT 	M.title,B.domestic_sales,B.international_sales FROM movies M join boxoffice B on M.id=B.movie_id ;
SELECT M.title,B.domestic_sales ,B.international_sales FROM movies M join boxoffice B on M.id=B.movie_id where B.domestic_sales < B.international_sales order by international_sales Desc ;
select m.title,b.rating from Movies m join Boxoffice b on m.id=b.Movie_id order by rating desc;


Exercise 7 — Tasks
Find the list of all buildings that have employees ✓
Find the list of all buildings and their capacity ✓
List all buildings and the distinct employee roles in each building (including empty buildings) ✓


SELECT DISTINCT building FROM employees;
SELECT building_name,capacity FROM buildings;
SELECT DISTINCT building_name, role 
FROM buildings 
  LEFT JOIN employees
    ON building_name = building;

Exercise 8 — Tasks
Find the name and role of all employees who have not been assigned to a building ✓
Find the names of the buildings that hold no employees ✓


SELECT role,name,building FROM employees where building is null;
SELECT DISTINCT building_name FROM buildings left join employees on building_name=building where role is null;


Exercise 9 — Tasks
List all movies and their combined sales in millions of dollars ✓
List all movies and their ratings in percent ✓
List all movies that were released on even number years 

SELECT title,(domestic_sales + international_sales) / 1000000  as combined sales FROM movies join boxoffice on id=movie_id;
SELECT m.title, (b.rating * 10) as rating_in_percet FROM movies m join boxoffice b on m.id=b.movie_id;
select title,year as even_year from movies where year%2 =0;


Exercise 10 — Tasks
Find the longest time that an employee has been at the studio ✓
For each role, find the average number of years employed by employees in that role ✓
Find the total number of employee years worked in each building ✓

SELECT max(years_employed) FROM employees;
SELECT Role,avg(years_employed) as avg_exp FROM employees group by role ;
select sum(years_employed) as Total_years_employed ,building from employees group by building;


Exercise 11 — Tasks
Find the number of Artists in the studio (without a HAVING clause) ✓
Find the number of Employees of each role in the studio ✓
Find the total number of years employed by all Engineers

SELECT count(role) as number_of_Artists FROM employees where role="Artist";
SELECT role, COUNT(*)
FROM employees
GROUP BY role;

SELECT role, SUM(years_employed)
FROM employees
GROUP BY role
HAVING role = "Engineer";


_____________________________________________________________________________________________________________
Query order of execution
1. FROM and JOINs
The FROM clause, and subsequent JOINs are first executed to determine the total working set of data that is being queried. This includes subqueries in this clause, and can cause temporary tables to be created under the hood containing all the columns and rows of the tables being joined.

2. WHERE
Once we have the total working set of data, the first-pass WHERE constraints are applied to the individual rows, and rows that do not satisfy the constraint are discarded. Each of the constraints can only access columns directly from the tables requested in the FROM clause. Aliases in the SELECT part of the query are not accessible in most databases since they may include expressions dependent on parts of the query that have not yet executed.

3. GROUP BY
The remaining rows after the WHERE constraints are applied are then grouped based on common values in the column specified in the GROUP BY clause. As a result of the grouping, there will only be as many rows as there are unique values in that column. Implicitly, this means that you should only need to use this when you have aggregate functions in your query.

4. HAVING
If the query has a GROUP BY clause, then the constraints in the HAVING clause are then applied to the grouped rows, discard the grouped rows that don't satisfy the constraint. Like the WHERE clause, aliases are also not accessible from this step in most databases.

5. SELECT
Any expressions in the SELECT part of the query are finally computed.

6. DISTINCT
Of the remaining rows, rows with duplicate values in the column marked as DISTINCT will be discarded.

7. ORDER BY
If an order is specified by the ORDER BY clause, the rows are then sorted by the specified data in either ascending or descending order. Since all the expressions in the SELECT part of the query have been computed, you can reference aliases in this clause.

8. LIMIT / OFFSET
Finally, the rows that fall outside the range specified by the LIMIT and OFFSET are discarded, leaving the final set of rows to be returned from the query.
________________________________________________________________________________________________________________________

Exercise 12 — Tasks
Find the number of movies each director has directed ✓
Find the total domestic and international sales that can be attributed to each director ✓

SELECT director,count(title) as number_of_movies FROM movies group by director;
select director,sum(domesti_sales + international_sales) as Cumulative_sales form movies inner join boxoffice on id=movie_id group by director;


Exercise 13 — Tasks
Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) ✓
Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table. ✓

INSERT INTO movies VALUES(4,"Toy Story 4","kk",2015,120)
INSERT INTO boxoffice VALUES (4, 8.7, 340000000, 270000000);


Exercise 14 — Tasks
The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
The year that Toy Story 2 was released is incorrect, it was actually released in 1999
Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich


update movies set Director="John Lasseter" where title="A Bug's Life"
update movies set year=1999 where title="Toy Story 2"
update movies set title="Toy Story 3",director="Lee Unkrich" where title="Toy Story 8"





Exercise 15 — Tasks
This database is getting too big, lets remove all movies that were released before 2005. ✓
Andrew Stanton has also left the studio, so please remove all movies directed by him.


delete from Movies where year < 2005
delete from Movies where director = "Andrew Stanton"




_________________________________________________________________________________________________________________________________________________________
Data type				Description
INTEGER, BOOLEAN			The integer datatypes can store whole integer values like the count of a number or an age. In some implementations, the boolean value is just 						represented as an integer value of just 0 or 1.
FLOAT, DOUBLE, REAL			The floating point datatypes can store more precise numerical data like measurements or fractional values. Different types can be used depending 					on the floating point precision required for that value.
CHARACTER(num_chars), 
VARCHAR(num_chars), TEXT	
					The text based datatypes can store strings and text in all sorts of locales. The distinction between the various types generally amount to 						underlaying efficiency of the database when working with these columns.

					Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can store (longer values may 					be truncated), so can be more efficient to store and query with big tables.

DATE, DATETIME				SQL can also store date and time stamps to keep track of time series and event data. They can be tricky to work with especially when manipulating 					data across timezones.
BLOB					Finally, SQL can store binary data in blobs right in the database. These values are often opaque to the database, so you usually have to store 						them with the right metadata to requery them.
____________________________________________________________________________________________________________________________________________________________________

Exercise 16 — Tasks
Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded

This table has no constraints. 

create table Database(
Name Text,
versrion float,
Download_count int

);



Exercise 17 — Tasks
Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in. ✓
Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.


Alter table movies add column Aspect_ratio Float;
Alter table movies add column Language TEXT DEFAULT "English";




Drop table movies;
DROP TABLE IF EXISTS boxoffice;(other way to drop)














Hakerrank Question and ans:


Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

select Distinct(city) from station where city regexp'^[aeiou]'

or

SELECT DISTINCT(city)
FROM STATION
WHERE LEFT(city, 1) IN ('A', 'E', 'I', 'O', 'U');
or
select Distinct city from station where city like 'a%' or  city like 'e%' or  city like 'i%' or  city like 'o%' or  city like 'u%' ;





Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

-- select Distinct city from station where city regexp '^[aeiou].*[aeiou]$';
or
select Distinct city from station where (city like 'a%' or city like 'e%' or city like 'i%' or city like 'o%' or city like 'u%') And (city like '%a' or  city like '%e' or  city like '%i' or  city like '%o' or  city like '%u');




Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
select Distinct city from STATION where city not regexp '^[aeiou]';

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
select Distinct city from STATION where city not regexp '[aeiou]$'



Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
-- select Distinct city from STATION where city not regexp '^[aeiou]' or city not regexp '[aeiou]$'

or
-- SELECT DISTINCT CITY FROM STATION WHERE LEFT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U') OR RIGHT(CITY, 1) NOT IN ('a', 'e', 'i', 'o', 'u');
or
SELECT DISTINCT city FROM station WHERE city REGEXP '^[^AEIOU]|.*[^AEIOU]$';

Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct city from station where city regexp '^[^aeiou]' and  city regexp '[^aeiou]$';




Query the Name of any student in STUDENTS who scored higher 75 than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

select Name from STUDENTS where Marks > 75 order by Right(Name,3) asc,id ASC;

or 

select Name from STUDENTS where Marks > 75 order by substr(Name,-3,3) asc,id ASC;




Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select Name from Employee order by name;



Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id

select Name from Employee where Salary > 2000 and months < 10  order by employee_id asc ;



Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of  2 decimal places.
The sum of all values in LONG_W rounded to a scale of  2 decimal places.

select round(sum(LAT_N),2),round(sum(LONG_W),2) from STATION;
